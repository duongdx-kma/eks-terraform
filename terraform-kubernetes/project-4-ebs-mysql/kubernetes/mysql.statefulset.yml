# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   labels:
#     app: mysql
#   name: mysql-set
# spec:
#   replicas: 2
#   selector:
#     matchLabels:
#       app: mysql
#   serviceName: "mysql"
#   template:
#     metadata:
#       labels:
#         app: mysql
#     spec:
#       terminationGracePeriodSeconds: 10
#       initContainers:
#       - name: init-mysql
#         image: mysql:8.0
#         command:
#         - /bin/sh
#         - -c
#         - |
#           if [ "$(hostname)" == "mysql-0" ]; then
#             echo "Initializing primary..."
#             mysql -uroot -p${MYSQL_ROOT_PASSWORD} -e "SET GLOBAL server_id=1; CREATE USER 'repl'@'%' IDENTIFIED BY 'Aa123456@'; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%';"
#           else
#             echo "Initializing replica..."
#             mysql -uroot -p${MYSQL_ROOT_PASSWORD} -e "CHANGE MASTER TO MASTER_HOST='mysql-0.mysql-write', MASTER_USER='repl', MASTER_PASSWORD='Aa123456@', MASTER_AUTO_POSITION=1; START SLAVE;"
#           fi
#       containers:
#         - image: mysql:8.0
#           name: mysql
#           ports:
#           - containerPort: 3306
#           envFrom:
#             - secretRef:
#                 name: mysql-secret
#           volumeMounts:
#             - mountPath: /var/lib/mysql
#               name: mysql-persistent-storage # same name
#             - mountPath: /docker-entrypoint-initdb.d
#               name: user-management-db-volume
#       volumes:
#         - name: user-management-db-volume
#           configMap:
#             name: user-management-db-script

#   volumeClaimTemplates:
#     - metadata:
#         name: mysql-persistent-storage # same name
#       spec:
#         accessModes: ["ReadWriteOnce"]
#         storageClassName: "mysql-persistent-storage"
#         volumeMode: Filesystem
#         resources:
#           requests:
#             storage: 1Gi


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  selector:
    matchLabels:
      app: mysql
      app.kubernetes.io/name: mysql
  serviceName: mysql
  replicas: 3
  template:
    metadata:
      labels:
        app: mysql
        app.kubernetes.io/name: mysql
    spec:
      initContainers:
      - name: init-mysql
        image: mysql:5.7
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Generate mysql server-id from pod ordinal index.
          [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          echo [mysqld] > /mnt/conf.d/server-id.cnf
          # Add an offset to avoid reserved server-id=0 value.
          echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
          # Copy appropriate conf.d files from config-map to emptyDir.
          if [[ $ordinal -eq 0 ]]; then
            cp /mnt/config-map/primary.cnf /mnt/conf.d/
          else
            cp /mnt/config-map/replica.cnf /mnt/conf.d/
          fi          
        volumeMounts:
        - name: conf
          mountPath: /mnt/conf.d
        - name: config-map
          mountPath: /mnt/config-map
        # - name: user-management-db-volume
        #   mountPath: /docker-entrypoint-initdb.d
      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        command:
        - bash
        - "-c"
        - |
          set -ex
          # Skip the clone if data already exists.
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          # Skip the clone on primary (ordinal index 0).
          [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          [[ $ordinal -eq 0 ]] && exit 0
          # Clone data from previous peer.
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # Prepare the backup.
          xtrabackup --prepare --target-dir=/var/lib/mysql          
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: user-management-db-volume
          mountPath: /docker-entrypoint-initdb.d
      containers:
      - name: mysql
        image: mysql:5.7
        envFrom:
            - secretRef:
                name: mysql-secret
        ports:
        - name: mysql
          containerPort: 3306
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: user-management-db-volume
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command: ["mysqladmin", "ping"]
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          exec:
            # Check we can execute queries over TCP (skip-networking is off).
            command: ["mysql", "-h", "127.0.0.1", "-p", "${}", "-e", "SELECT 1"]
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        envFrom:
        - secretRef:
            name: mysql-secret
        ports:
        - name: xtrabackup
          containerPort: 3307
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql

          # Determine binlog position of cloned data, if any.
          if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
            # XtraBackup already generated a partial "CHANGE MASTER TO" query
            # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
            cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
            # Ignore xtrabackup_binlog_info in this case (it's useless).
            rm -f xtrabackup_slave_info xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # We're cloning directly from primary. Parse binlog position.
            [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm -f xtrabackup_binlog_info xtrabackup_slave_info
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi

          # Check if we need to complete a clone by starting replication.
          if [[ -f change_master_to.sql.in ]]; then
            echo "Waiting for mysqld to be ready (accepting connections)"
            until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

            echo "Initializing replication from clone position"
            mysql -h 127.0.0.1 \
                  -e "$(<change_master_to.sql.in), \
                          MASTER_HOST='mysql-0.mysql', \
                          MASTER_USER='root', \
                          MASTER_PASSWORD=$MYSQL_ROOT_PASSWORD, \
                          MASTER_CONNECT_RETRY=10; \
                        START SLAVE;" || exit 1
            # In case of container restart, attempt this at-most-once.
            mv change_master_to.sql.in change_master_to.sql.orig
          fi

          # Start a server to send backups when requested by peers.
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"          
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf
          mountPath: /etc/mysql/conf.d
        - name: user-management-db-volume
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      volumes:
      - name: conf
        emptyDir: {}
      - name: config-map
        configMap:
          name: mysql
      - name: user-management-db-volume
        configMap:
          name: user-management-db-script
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      # storageClassName: "mysql-persistent-storage" # if null it will using default storage class
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: 500Mi
